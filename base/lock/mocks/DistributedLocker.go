// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	lock "github.com/georgechang0117/url-shortener/base/lock"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DistributedLocker is an autogenerated mock type for the DistributedLocker type
type DistributedLocker struct {
	mock.Mock
}

// Lock provides a mock function with given fields: key, ttl, retryDelay, retryCount
func (_m *DistributedLocker) Lock(key string, ttl time.Duration, retryDelay time.Duration, retryCount int) (lock.Lock, error) {
	ret := _m.Called(key, ttl, retryDelay, retryCount)

	var r0 lock.Lock
	if rf, ok := ret.Get(0).(func(string, time.Duration, time.Duration, int) lock.Lock); ok {
		r0 = rf(key, ttl, retryDelay, retryCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lock.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration, time.Duration, int) error); ok {
		r1 = rf(key, ttl, retryDelay, retryCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
