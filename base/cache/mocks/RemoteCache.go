// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	cache "github.com/georgechang0117/url-shortener/base/cache"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RemoteCache is an autogenerated mock type for the RemoteCache type
type RemoteCache struct {
	mock.Mock
}

// Exists provides a mock function with given fields: key
func (_m *RemoteCache) Exists(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *RemoteCache) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrSet provides a mock function with given fields: key, gen
func (_m *RemoteCache) GetOrSet(key string, gen cache.RemoteEntryGenerator) ([]byte, error) {
	ret := _m.Called(key, gen)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, cache.RemoteEntryGenerator) []byte); ok {
		r0 = rf(key, gen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, cache.RemoteEntryGenerator) error); ok {
		r1 = rf(key, gen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value, ttl
func (_m *RemoteCache) Set(key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
