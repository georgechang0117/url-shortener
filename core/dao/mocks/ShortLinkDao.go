// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	dao "github.com/georgechang0117/url-shortener/core/dao"
	mock "github.com/stretchr/testify/mock"
)

// ShortLinkDao is an autogenerated mock type for the ShortLinkDao type
type ShortLinkDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: shortLink
func (_m *ShortLinkDao) Create(shortLink *dao.ShortLink) error {
	ret := _m.Called(shortLink)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dao.ShortLink) error); ok {
		r0 = rf(shortLink)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *ShortLinkDao) Exists(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByURLID provides a mock function with given fields: urlID
func (_m *ShortLinkDao) GetByURLID(urlID string) (*dao.ShortLink, error) {
	ret := _m.Called(urlID)

	var r0 *dao.ShortLink
	if rf, ok := ret.Get(0).(func(string) *dao.ShortLink); ok {
		r0 = rf(urlID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(urlID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
